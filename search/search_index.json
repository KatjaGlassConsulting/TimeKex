{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the TimeKex \u00b6 TimeKex - Timetracking, Kimai meets Excel This WebApplication is designed to allow the tracking of working hours in Excel which can then be uploaded to the Kimai Timetracking application. Kimai is an open-source free time-tracking application which comes with a lot of functionality and capabilities. There might be situations where the times should be tracked in Excel and finally be uploaded to Kimai. TimeKex is designed to support this process. Status \u00b6 This repository is under development. The first release is planned for Q1-2022. In this repository the source code and documentation for TimeKex will be made available. Prerequisites: \u00b6 To be able to run TimeKex, a running instance of Kimai is required together with a user and an API key of this user. The API password can be set in Kimai via \"profile\", \"API\" and then \"API Password\". There is a stable demonstration version available for Kimai which can be used for demonstration purposes ( linked here ). To checkout demo users and specifically the API password of a demo user, check the demo information page .","title":"Home"},{"location":"#welcome-to-the-timekex","text":"TimeKex - Timetracking, Kimai meets Excel This WebApplication is designed to allow the tracking of working hours in Excel which can then be uploaded to the Kimai Timetracking application. Kimai is an open-source free time-tracking application which comes with a lot of functionality and capabilities. There might be situations where the times should be tracked in Excel and finally be uploaded to Kimai. TimeKex is designed to support this process.","title":"Welcome to the TimeKex"},{"location":"#status","text":"This repository is under development. The first release is planned for Q1-2022. In this repository the source code and documentation for TimeKex will be made available.","title":"Status"},{"location":"#prerequisites","text":"To be able to run TimeKex, a running instance of Kimai is required together with a user and an API key of this user. The API password can be set in Kimai via \"profile\", \"API\" and then \"API Password\". There is a stable demonstration version available for Kimai which can be used for demonstration purposes ( linked here ). To checkout demo users and specifically the API password of a demo user, check the demo information page .","title":"Prerequisites:"},{"location":"setup/","text":"Setup \u00b6 Local Development and Compilation \u00b6 TimeKex is a ReactJS Web Application. To run a local development version, you can use NPM to install all dependencies and start or build the app. Make sure to have NPM installed Download/clone this repository to a folder <folder> Open the command line, go to that folder (cd <folder> ) Install packages using npm install Start the development server with npm start Build the app via npm run build Deployment \u00b6 The TimeKex web application is a simple static HTML fileset which can run locally or on any Webserver. If you are not familar with NPM, you simply can copy the application from the GitHub branch \"gh-deploy\" . Copy all files from the \"app\" folder to any location (local PC or webserver) and start the app by open \"index.html\". TODO: Image of folder structure and arrow to index.html Configuration \u00b6 There are some configurations possible which are set through a config.json file in the root folder of the application. Possible settings are explained here. TODO: clarify with Kimai to include exmaples from demo-stable var co nf ig = { \"kimaiAPI\" : \"https://XXX/api/\" , \"ignoreActivities\" : [ \"Vacation\" , \"Public Holiday\" ], \"adminUser\" : [ \"anna_admin\" , \"susan_super\" ], \"username\" : \"john_user\" , \"password\" : \"XXX\" } Key Required Description kimaiAPI Yes URL to the Kimai API - example above is from the demo instance from kimai.org ignoreActivities No Activities which should be ignored (not copied to Kimai, not deleted when available) can be included as Array-List adminUser No The admin tab of the app is only displayed when the logged in user is in this list. When this item is not available, the corresponding tab is visible for everyone. username and password No When this is provided through the config, then there is no Login screen. This is only recommended for development purposes or when this application is run just locally by one person. Excel Structure \u00b6 The Excel file is expected in a specific format. When the Excel file should contain a different structure, for example different column names, this can be changed by a source code updated and re-compiling the app. The file src/features/excelImport/ExcelSchema is responsible to read in and map the corresponding Excel file to the specific object required for the application. Feel free to update the column names from the Excel file. The package read-excel-file is used to read in the Excel file and use the corresponding schema for mapping. Please look into the package details to apply a different schema.","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#local-development-and-compilation","text":"TimeKex is a ReactJS Web Application. To run a local development version, you can use NPM to install all dependencies and start or build the app. Make sure to have NPM installed Download/clone this repository to a folder <folder> Open the command line, go to that folder (cd <folder> ) Install packages using npm install Start the development server with npm start Build the app via npm run build","title":"Local Development and Compilation"},{"location":"setup/#deployment","text":"The TimeKex web application is a simple static HTML fileset which can run locally or on any Webserver. If you are not familar with NPM, you simply can copy the application from the GitHub branch \"gh-deploy\" . Copy all files from the \"app\" folder to any location (local PC or webserver) and start the app by open \"index.html\". TODO: Image of folder structure and arrow to index.html","title":"Deployment"},{"location":"setup/#configuration","text":"There are some configurations possible which are set through a config.json file in the root folder of the application. Possible settings are explained here. TODO: clarify with Kimai to include exmaples from demo-stable var co nf ig = { \"kimaiAPI\" : \"https://XXX/api/\" , \"ignoreActivities\" : [ \"Vacation\" , \"Public Holiday\" ], \"adminUser\" : [ \"anna_admin\" , \"susan_super\" ], \"username\" : \"john_user\" , \"password\" : \"XXX\" } Key Required Description kimaiAPI Yes URL to the Kimai API - example above is from the demo instance from kimai.org ignoreActivities No Activities which should be ignored (not copied to Kimai, not deleted when available) can be included as Array-List adminUser No The admin tab of the app is only displayed when the logged in user is in this list. When this item is not available, the corresponding tab is visible for everyone. username and password No When this is provided through the config, then there is no Login screen. This is only recommended for development purposes or when this application is run just locally by one person.","title":"Configuration"},{"location":"setup/#excel-structure","text":"The Excel file is expected in a specific format. When the Excel file should contain a different structure, for example different column names, this can be changed by a source code updated and re-compiling the app. The file src/features/excelImport/ExcelSchema is responsible to read in and map the corresponding Excel file to the specific object required for the application. Feel free to update the column names from the Excel file. The package read-excel-file is used to read in the Excel file and use the corresponding schema for mapping. Please look into the package details to apply a different schema.","title":"Excel Structure"},{"location":"userGuide/","text":"User Guide \u00b6 TODO","title":"User Guide"},{"location":"userGuide/#user-guide","text":"TODO","title":"User Guide"}]}