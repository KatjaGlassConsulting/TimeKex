{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the TimeKex \u00b6 TimeKex - Timetracking, Kimai meets Excel This WebApplication is designed to allow the tracking of working hours in Excel which can then be uploaded to the Kimai Timetracking application. Kimai is an open-source free time-tracking application which comes with a lot of functionality and capabilities. There might be situations where the times should be tracked in Excel and finally be uploaded to Kimai. TimeKex is designed to support this process. Status \u00b6 TimeKex is available in the current version which does not contain tests. The source code is available under the MIT license which allows a flexible and generic usage and modifications without warrenty. The demonstration is running on the stable Kimai demo instance. Be aware that this demo instances is regularily rebuild.","title":"Home"},{"location":"#welcome-to-the-timekex","text":"TimeKex - Timetracking, Kimai meets Excel This WebApplication is designed to allow the tracking of working hours in Excel which can then be uploaded to the Kimai Timetracking application. Kimai is an open-source free time-tracking application which comes with a lot of functionality and capabilities. There might be situations where the times should be tracked in Excel and finally be uploaded to Kimai. TimeKex is designed to support this process.","title":"Welcome to the TimeKex"},{"location":"#status","text":"TimeKex is available in the current version which does not contain tests. The source code is available under the MIT license which allows a flexible and generic usage and modifications without warrenty. The demonstration is running on the stable Kimai demo instance. Be aware that this demo instances is regularily rebuild.","title":"Status"},{"location":"adminGuide/","text":"Admin Panel \u00b6 Via the Admin Panel it is possible to create Customer, Projects and Activities via an Excel file. If you need to import Customer and Projects together with a lot of other fields, I recommend to use the Kimai command line functionality as in the documentation . For a quick creation, e.g. for test data, this API based approach can be used. Excel File \u00b6 Customer, Projects and Activities can automatically be created through an Excel file. An example file is available under \"./exampleFiles/TimeKex_createData.xlsx\" Create DB Data \u00b6 To actually create the Customer, Projects and Activities, the \"Admin\" panel can be used. Depending on the configuration, this panel might not be visible for the currently logged in user. When the \"adminUser\" configration is set, then only these users mentioned there will have the \"Admin\" panel available. If the config does not contain any user, the Admin panel is visible for all. \"adminUser\" : [\"anna_admin\",\"susan_super\"] By clicking \"Create DB Data\" the excel file with the specific structure can be selected to create the corresponding entries. DB Data creation successful \u00b6 After loading the Excel file, the Customers, Projects and Activities are created via the Kimai API. The success messages can be reviewed on the screen. Issues: When something should be created which already exists, it is not created. Other issues could be available, e.g. the user does not have admin access. This will be printed. Also when a project cannot be created, for example as no customer had been provided, an issue message will appear. Check back in Kimai \u00b6 You can log into Kimai to see that these projects, customers and activities has been created.","title":"Admin Panel"},{"location":"adminGuide/#admin-panel","text":"Via the Admin Panel it is possible to create Customer, Projects and Activities via an Excel file. If you need to import Customer and Projects together with a lot of other fields, I recommend to use the Kimai command line functionality as in the documentation . For a quick creation, e.g. for test data, this API based approach can be used.","title":"Admin Panel"},{"location":"adminGuide/#excel-file","text":"Customer, Projects and Activities can automatically be created through an Excel file. An example file is available under \"./exampleFiles/TimeKex_createData.xlsx\"","title":"Excel File"},{"location":"adminGuide/#create-db-data","text":"To actually create the Customer, Projects and Activities, the \"Admin\" panel can be used. Depending on the configuration, this panel might not be visible for the currently logged in user. When the \"adminUser\" configration is set, then only these users mentioned there will have the \"Admin\" panel available. If the config does not contain any user, the Admin panel is visible for all. \"adminUser\" : [\"anna_admin\",\"susan_super\"] By clicking \"Create DB Data\" the excel file with the specific structure can be selected to create the corresponding entries.","title":"Create DB Data"},{"location":"adminGuide/#db-data-creation-successful","text":"After loading the Excel file, the Customers, Projects and Activities are created via the Kimai API. The success messages can be reviewed on the screen. Issues: When something should be created which already exists, it is not created. Other issues could be available, e.g. the user does not have admin access. This will be printed. Also when a project cannot be created, for example as no customer had been provided, an issue message will appear.","title":"DB Data creation successful"},{"location":"adminGuide/#check-back-in-kimai","text":"You can log into Kimai to see that these projects, customers and activities has been created.","title":"Check back in Kimai"},{"location":"setup/","text":"Setup \u00b6 Prerequisites \u00b6 To be able to run TimeKex, a running instance of Kimai is required together with a user and an API key of this user. The API password can be set in Kimai via \"profile\", \"API\" and then \"API Password\". There is a stable demonstration version available for Kimai which can be used for demonstration purposes ( linked here ). To checkout demo users and specifically the API password of a demo user, check the demo information page . Local Development and Compilation \u00b6 TimeKex is a ReactJS Web Application. To run a local development version, you can use NPM to install all dependencies and start or build the app. Make sure to have NPM installed Download/clone this repository to a folder <folder> Open the command line, go to that folder (cd <folder> ) Install packages using npm install Start the development server with npm start Build the app via npm run build Deployment \u00b6 The TimeKex web application is a simple static HTML fileset which can run locally or on any Webserver. When you have build the app, it can simply be started by opening \"index.html\". The final build folder contains next to the config.js also additional example configurations files which you might want to try. Just copy the content as config.js to apply the corresponding configuration. The current configuration files are using the Kimai demonstration server and users. Configuration \u00b6 There are some configurations possible which are set through a config.json file in the root folder of the application. Possible settings are explained here. var co nf ig = { \"kimaiAPI\" : \"https://XXX/api/\" , \"ignoreActivities\" : [ \"Vacation\" , \"Public Holiday\" ], \"adminUser\" : [ \"anna_admin\" , \"susan_super\" ], \"username\" : \"john_user\" , \"password\" : \"XXX\" } Key Required Description kimaiAPI Yes URL to the Kimai API - example above is from the demo instance from kimai.org ignoreActivities No Activities which should be ignored (not copied to Kimai, not deleted when available) can be included as Array-List adminUser No The admin tab of the app is only displayed when the logged in user is in this list. When this item is not available, the corresponding tab is visible for everyone. username and password No When this is provided through the config, then there is no Login screen. This is only recommended for development purposes or when this application is run just locally by one person. Excel Structure Timesheets \u00b6 The Excel file is expected in a specific format. When the Excel file should contain a different structure, for example different column names, this can be changed by a source code updated and re-compiling the app. The file src/features/excelImport/ExcelSchema is responsible to read in and map the corresponding Excel file to the specific object required for the application. Feel free to update the column names from the Excel file. The package read-excel-file is used to read in the Excel file and use the corresponding schema for mapping. Please look into the package details to apply a different schema. For the Excel file it is very important that the first sheet contains the time data and that the first row starts with the column names. There can be additional sheets and additional columns in the Excel file. The column order is also not relevant. Example file is available under \"./exampleFiles\"","title":"Setup"},{"location":"setup/#setup","text":"","title":"Setup"},{"location":"setup/#prerequisites","text":"To be able to run TimeKex, a running instance of Kimai is required together with a user and an API key of this user. The API password can be set in Kimai via \"profile\", \"API\" and then \"API Password\". There is a stable demonstration version available for Kimai which can be used for demonstration purposes ( linked here ). To checkout demo users and specifically the API password of a demo user, check the demo information page .","title":"Prerequisites"},{"location":"setup/#local-development-and-compilation","text":"TimeKex is a ReactJS Web Application. To run a local development version, you can use NPM to install all dependencies and start or build the app. Make sure to have NPM installed Download/clone this repository to a folder <folder> Open the command line, go to that folder (cd <folder> ) Install packages using npm install Start the development server with npm start Build the app via npm run build","title":"Local Development and Compilation"},{"location":"setup/#deployment","text":"The TimeKex web application is a simple static HTML fileset which can run locally or on any Webserver. When you have build the app, it can simply be started by opening \"index.html\". The final build folder contains next to the config.js also additional example configurations files which you might want to try. Just copy the content as config.js to apply the corresponding configuration. The current configuration files are using the Kimai demonstration server and users.","title":"Deployment"},{"location":"setup/#configuration","text":"There are some configurations possible which are set through a config.json file in the root folder of the application. Possible settings are explained here. var co nf ig = { \"kimaiAPI\" : \"https://XXX/api/\" , \"ignoreActivities\" : [ \"Vacation\" , \"Public Holiday\" ], \"adminUser\" : [ \"anna_admin\" , \"susan_super\" ], \"username\" : \"john_user\" , \"password\" : \"XXX\" } Key Required Description kimaiAPI Yes URL to the Kimai API - example above is from the demo instance from kimai.org ignoreActivities No Activities which should be ignored (not copied to Kimai, not deleted when available) can be included as Array-List adminUser No The admin tab of the app is only displayed when the logged in user is in this list. When this item is not available, the corresponding tab is visible for everyone. username and password No When this is provided through the config, then there is no Login screen. This is only recommended for development purposes or when this application is run just locally by one person.","title":"Configuration"},{"location":"setup/#excel-structure-timesheets","text":"The Excel file is expected in a specific format. When the Excel file should contain a different structure, for example different column names, this can be changed by a source code updated and re-compiling the app. The file src/features/excelImport/ExcelSchema is responsible to read in and map the corresponding Excel file to the specific object required for the application. Feel free to update the column names from the Excel file. The package read-excel-file is used to read in the Excel file and use the corresponding schema for mapping. Please look into the package details to apply a different schema. For the Excel file it is very important that the first sheet contains the time data and that the first row starts with the column names. There can be additional sheets and additional columns in the Excel file. The column order is also not relevant. Example file is available under \"./exampleFiles\"","title":"Excel Structure Timesheets"},{"location":"userGuide/","text":"User Panel \u00b6 Login \u00b6 Typically there will be a login required. This login needs the user name and API passwort. Please make sure to use the API password for Kimai and not the login password. The login can also be done automatically through the configuration. This can be used for testing purposes, when just one user should use the web application or when the application should be located for each user locally. var config = { \"username\" : \"anna_admin\", \"password\" : \"<PASSWORD>\", \"kimaiAPI\" : \"https://demo-stable.kimai.org/api/\", ... } If there is no automatic login, the login screen is displayed: If invalid credentials are used, a modal is displayed to show this. Process Flow \u00b6 The web application is designed to load times from Excel to Kimai. With the \"Choose File\" box, the timesheet Excel file can be selected. Data from the excel and from Kimai is loaded and compared. The main screen displays always week data starting with the last one from Excel and containing only those in the Excel file. The weeks can be changed easily with a forth and back button. After checking the content the \"Send\" button sends the update to Kimai. Additional time entries are added and if entries are available in Kimai which are not in the Excel file, these entries are deleted. Before deletion in Kimai is done, there is an extra confirmation screen to make sure not to delete entries which should not have been deleted. The following animation shows an example flow. Please see below for additional details. Main Bar \u00b6 The main bar contains a button to load the timesheet data excel file and three status boxes. The first status box show the Excel File Status. In case of any issues, this box will be red. When the file is loaded successfully, it will be green. The \"Kimai General Data Status\" shows the status of the access to Kimai and when read in the general information, e.g. about customers, projects and activities. When there is an issue, the box will be red, this means the Kimai API is not set correctly or the server is currently not reachable. In case of issues, you might want to check the development console which shows the exact error. After loading general data, the time sheet data for the user is loaded. The status of this loading is shown through the \"Kimai Timesheet Status\". Excel File \u00b6 The Excel file should contain at least the following columns which must be on the first sheet and starting in the first row (order of columns irrelevant): Line number, Date, Client, Project, Activity, chargeable, chargeable (correction), Tasks, Start, End The chargeable (correction) is optional and can also be omitted. An example could look like the following: Per Week Display \u00b6 When the Excel file is loaded, the per-week display is shown. The week can easily be changed via the week-selection-box. Only weeks available in the Excel file are included. The main information box of the week displey shows a button to send the timesheet data to kimai and a summary of the hours of this week and how much of those hours are billable. Below is the list of entries which are in the Excel file and in Kimai. The \"Line\" is coming from the Excel file line number. \"ID\" is the internal Kimai ID of that timesheet item. If a row has no ID, that means this row is not in Kimai. The action which is also displayed in the very first column for such a case is to \"add\" this entry. There could also be entries in Kimai which are not in the Excel file (missing line, but available ID), in such a case the action would be \"delete\". Some entries should be ignored, for example there could be \"vacations\" which should not be included in Kimai or which should not be deleted from Kimai as this might be included differenty. Such \"ignore\" items are maintained in the configuration file of the web application. var config = { \"ignoreActivities\" : [\"Vacation\",\"Public Holiday\"], ... } Whenever there is something special, there is an \"i\"nformation icon. With the mouse over effect additional hints are printed. After clicking the \"Send to Kimai\" button, the actions are performed. When the action was succcessful, the complete row becomes green and the action text changed from \"add\" to \"added\" and from \"delete\" to \"deleted\". If issues appeared, the row will be red and issue information can be displayed via the mouseover effect for the \"i\". Invalid Data \u00b6 The web application is checking some typical errors, that these are available before sending time entries to Kimai. The most common issue is that the Project or Activity does not exist in Kimai. In such cases the lines will be marked as \"error\" lines which displays an additional error text hint hidden behind the \"i\". Time overlaps should ideally also not be available and are highlighted. As such issues are not critical, these still can be added. When clicking the \"Send to Kimai\" button, only \"add\" and \"delete\" actions are executed.","title":"User Panel"},{"location":"userGuide/#user-panel","text":"","title":"User Panel"},{"location":"userGuide/#login","text":"Typically there will be a login required. This login needs the user name and API passwort. Please make sure to use the API password for Kimai and not the login password. The login can also be done automatically through the configuration. This can be used for testing purposes, when just one user should use the web application or when the application should be located for each user locally. var config = { \"username\" : \"anna_admin\", \"password\" : \"<PASSWORD>\", \"kimaiAPI\" : \"https://demo-stable.kimai.org/api/\", ... } If there is no automatic login, the login screen is displayed: If invalid credentials are used, a modal is displayed to show this.","title":"Login"},{"location":"userGuide/#process-flow","text":"The web application is designed to load times from Excel to Kimai. With the \"Choose File\" box, the timesheet Excel file can be selected. Data from the excel and from Kimai is loaded and compared. The main screen displays always week data starting with the last one from Excel and containing only those in the Excel file. The weeks can be changed easily with a forth and back button. After checking the content the \"Send\" button sends the update to Kimai. Additional time entries are added and if entries are available in Kimai which are not in the Excel file, these entries are deleted. Before deletion in Kimai is done, there is an extra confirmation screen to make sure not to delete entries which should not have been deleted. The following animation shows an example flow. Please see below for additional details.","title":"Process Flow"},{"location":"userGuide/#main-bar","text":"The main bar contains a button to load the timesheet data excel file and three status boxes. The first status box show the Excel File Status. In case of any issues, this box will be red. When the file is loaded successfully, it will be green. The \"Kimai General Data Status\" shows the status of the access to Kimai and when read in the general information, e.g. about customers, projects and activities. When there is an issue, the box will be red, this means the Kimai API is not set correctly or the server is currently not reachable. In case of issues, you might want to check the development console which shows the exact error. After loading general data, the time sheet data for the user is loaded. The status of this loading is shown through the \"Kimai Timesheet Status\".","title":"Main Bar"},{"location":"userGuide/#excel-file","text":"The Excel file should contain at least the following columns which must be on the first sheet and starting in the first row (order of columns irrelevant): Line number, Date, Client, Project, Activity, chargeable, chargeable (correction), Tasks, Start, End The chargeable (correction) is optional and can also be omitted. An example could look like the following:","title":"Excel File"},{"location":"userGuide/#per-week-display","text":"When the Excel file is loaded, the per-week display is shown. The week can easily be changed via the week-selection-box. Only weeks available in the Excel file are included. The main information box of the week displey shows a button to send the timesheet data to kimai and a summary of the hours of this week and how much of those hours are billable. Below is the list of entries which are in the Excel file and in Kimai. The \"Line\" is coming from the Excel file line number. \"ID\" is the internal Kimai ID of that timesheet item. If a row has no ID, that means this row is not in Kimai. The action which is also displayed in the very first column for such a case is to \"add\" this entry. There could also be entries in Kimai which are not in the Excel file (missing line, but available ID), in such a case the action would be \"delete\". Some entries should be ignored, for example there could be \"vacations\" which should not be included in Kimai or which should not be deleted from Kimai as this might be included differenty. Such \"ignore\" items are maintained in the configuration file of the web application. var config = { \"ignoreActivities\" : [\"Vacation\",\"Public Holiday\"], ... } Whenever there is something special, there is an \"i\"nformation icon. With the mouse over effect additional hints are printed. After clicking the \"Send to Kimai\" button, the actions are performed. When the action was succcessful, the complete row becomes green and the action text changed from \"add\" to \"added\" and from \"delete\" to \"deleted\". If issues appeared, the row will be red and issue information can be displayed via the mouseover effect for the \"i\".","title":"Per Week Display"},{"location":"userGuide/#invalid-data","text":"The web application is checking some typical errors, that these are available before sending time entries to Kimai. The most common issue is that the Project or Activity does not exist in Kimai. In such cases the lines will be marked as \"error\" lines which displays an additional error text hint hidden behind the \"i\". Time overlaps should ideally also not be available and are highlighted. As such issues are not critical, these still can be added. When clicking the \"Send to Kimai\" button, only \"add\" and \"delete\" actions are executed.","title":"Invalid Data"}]}